{"mappings":"YAWA,IAAMA,EAAiBC,SAASC,uBAAuB,oBAAoB,GACrEC,EAAiBF,SAASC,uBAAuB,oBAAoB,GACrEE,EAAoBD,EAAeE,SAAS,GAC5CC,EAAqBH,EAAeE,SAAS,GAC7CE,EAAiBC,MAAMC,KAAKH,EAAmBD,UAC/CK,EAAeH,EAAeI,OAGhCC,GAFiBR,EAAkBS,aAAa,cAEhC,IAChBC,GAAqB,EA+BzB,SAASC,IACPZ,EAAea,UAAUC,OAAO,YAEhCd,EAAee,aAAa,eAAe,GAE3CC,GAA0B,GAG1BlB,SAASmB,oBAAoB,QAASC,GACtCpB,SAASmB,oBAAoB,UAAWE,E,CAG1C,SAASH,EAA0BI,GACjC,IAAMC,EAAalB,EAAmBD,SAASS,GACzCW,EAASnB,EAAmBD,SAASkB,GAEvCC,GACFA,EAAWR,UAAUC,OAAO,WAE1BQ,GACFA,EAAOT,UAAUU,IAAI,WAGvBZ,EAAqBS,C,CAGvB,SAASI,EAA0BC,EAAOC,GACxC,IAAMC,EAAYlB,EAEZmB,EAAezB,EAAmB0B,cACtC,gBAA0BC,OAAVH,EAAU,MAEtBI,EAAW5B,EAAmB0B,cAAc,gBAAsBC,OAANL,EAAM,MAEpEG,GACFA,EAAaf,UAAUC,OAAO,YAG5BiB,GACFA,EAASlB,UAAUU,IAAI,YAGzBtB,EAAkB+B,YAAcN,EAChCjB,EAAgBgB,C,CAGlB,SAASP,EAAkBe,IACEjC,EAAekC,SAASC,MAAMC,SAEvDxB,G,CAIJ,SAASO,EAA0Bc,GAEjC,GAAsB,KAAlBE,MAAME,SAAkB1B,EAAqBJ,EAAe,EAAG,CAEjE0B,EAAEK,iBACFtB,EAA0BL,EAAqB,E,CAUjD,GANsB,KAAlBwB,MAAME,SAAkB1B,EAAqB,IAC/CsB,EAAEK,iBACFtB,EAA0BL,EAAqB,IAI3B,KAAlBwB,MAAME,SAAoC,KAAlBF,MAAME,QAAgB,CAChDJ,EAAEK,iBAEF,IAAMhB,EAASnB,EAAmBD,SAASS,GACrCc,EAAQH,GAAUA,EAAOZ,aAAa,cAExCe,IACF5B,EAAe4B,MAAQA,EACvBD,EAA0BC,EAAOH,EAAOU,cAE1CpB,G,CAIoB,KAAlBuB,MAAME,SACRzB,G,CA/GJX,EAAkBsC,iBAAiB,SAAS,SAAAN,IACxBjC,EAAea,UAAUqB,SAAS,YAStD,WAME,GALAlC,EAAea,UAAUU,IAAI,YAG7BvB,EAAee,aAAa,eAAe,GAEvCN,EAAe,CAIjBO,EAH2BZ,EAAeoC,WACxC,SAAAC,G,OAAMA,EAAG/B,aAAa,gBAAkBD,C,KAM5CX,SAASyC,iBAAiB,QAASrB,GACnCpB,SAASyC,iBAAiB,UAAWpB,E,CArBnCuB,GAEA9B,G,IA8GJf,EAAe0C,iBAAiB,UAAU,SAAAN,GACxC,IAAMR,EAAQQ,EAAEG,OAAOX,MAKvBD,EAA0BC,EAJOtB,EAAmBwC,iBAClD,gBAAsBb,OAANL,EAAM,OACtB,GAEwDO,Y,IAI5D5B,EAAewC,SAAQ,SAAUb,EAAUc,GACzCd,EAASQ,iBAAiB,SAAS,SAAAN,GACjC,IAAMR,EAAQQ,EAAEG,OAAO1B,aAAa,cAGpCb,EAAe4B,MAAQA,EACvBD,EAA0BC,EAAOQ,EAAEG,OAAOJ,aAC1CpB,G,IAGFmB,EAASQ,iBAAiB,cAAc,SAAAN,GACtCjB,EAA0B6B,E","sources":["src/js/select-q.js"],"sourcesContent":["/* Features to make the selectCustom work for mouse users.\n\n- Toggle custom select visibility when clicking the \"box\"\n- Update custom select value when clicking in a option\n- Navigate through options when using keyboard up/down\n- Pressing Enter or Space selects the current hovered option\n- Close the select when clicking outside of it\n- Sync both selects values when selecting a option. (native or custom)\n\n*/\n\nconst elSelectNative = document.getElementsByClassName('js-selectNativeQ')[0];\nconst elSelectCustom = document.getElementsByClassName('js-selectCustomQ')[0];\nconst elSelectCustomBox = elSelectCustom.children[0];\nconst elSelectCustomOpts = elSelectCustom.children[1];\nconst customOptsList = Array.from(elSelectCustomOpts.children);\nconst optionsCount = customOptsList.length;\nconst defaultLabel = elSelectCustomBox.getAttribute('data-value');\n\nlet optionChecked = '';\nlet optionHoveredIndex = -1;\n\n// Toggle custom select visibility when clicking the box\nelSelectCustomBox.addEventListener('click', e => {\n  const isClosed = !elSelectCustom.classList.contains('isActive');\n\n  if (isClosed) {\n    openSelectCustom();\n  } else {\n    closeSelectCustom();\n  }\n});\n\nfunction openSelectCustom() {\n  elSelectCustom.classList.add('isActive');\n  // Remove aria-hidden in case this was opened by a user\n  // who uses AT (e.g. Screen Reader) and a mouse at the same time.\n  elSelectCustom.setAttribute('aria-hidden', false);\n\n  if (optionChecked) {\n    const optionCheckedIndex = customOptsList.findIndex(\n      el => el.getAttribute('data-value') === optionChecked\n    );\n    updateCustomSelectHovered(optionCheckedIndex);\n  }\n\n  // Add related event listeners\n  document.addEventListener('click', watchClickOutside);\n  document.addEventListener('keydown', supportKeyboardNavigation);\n}\n\nfunction closeSelectCustom() {\n  elSelectCustom.classList.remove('isActive');\n\n  elSelectCustom.setAttribute('aria-hidden', true);\n\n  updateCustomSelectHovered(-1);\n\n  // Remove related event listeners\n  document.removeEventListener('click', watchClickOutside);\n  document.removeEventListener('keydown', supportKeyboardNavigation);\n}\n\nfunction updateCustomSelectHovered(newIndex) {\n  const prevOption = elSelectCustomOpts.children[optionHoveredIndex];\n  const option = elSelectCustomOpts.children[newIndex];\n\n  if (prevOption) {\n    prevOption.classList.remove('isHover');\n  }\n  if (option) {\n    option.classList.add('isHover');\n  }\n\n  optionHoveredIndex = newIndex;\n}\n\nfunction updateCustomSelectChecked(value, text) {\n  const prevValue = optionChecked;\n\n  const elPrevOption = elSelectCustomOpts.querySelector(\n    `[data-value=\"${prevValue}\"`\n  );\n  const elOption = elSelectCustomOpts.querySelector(`[data-value=\"${value}\"`);\n\n  if (elPrevOption) {\n    elPrevOption.classList.remove('isActive');\n  }\n\n  if (elOption) {\n    elOption.classList.add('isActive');\n  }\n\n  elSelectCustomBox.textContent = text;\n  optionChecked = value;\n}\n\nfunction watchClickOutside(e) {\n  const didClickedOutside = !elSelectCustom.contains(event.target);\n  if (didClickedOutside) {\n    closeSelectCustom();\n  }\n}\n\nfunction supportKeyboardNavigation(e) {\n  // press down -> go next\n  if (event.keyCode === 40 && optionHoveredIndex < optionsCount - 1) {\n    let index = optionHoveredIndex;\n    e.preventDefault(); // prevent page scrolling\n    updateCustomSelectHovered(optionHoveredIndex + 1);\n  }\n\n  // press up -> go previous\n  if (event.keyCode === 38 && optionHoveredIndex > 0) {\n    e.preventDefault(); // prevent page scrolling\n    updateCustomSelectHovered(optionHoveredIndex - 1);\n  }\n\n  // press Enter or space -> select the option\n  if (event.keyCode === 13 || event.keyCode === 32) {\n    e.preventDefault();\n\n    const option = elSelectCustomOpts.children[optionHoveredIndex];\n    const value = option && option.getAttribute('data-value');\n\n    if (value) {\n      elSelectNative.value = value;\n      updateCustomSelectChecked(value, option.textContent);\n    }\n    closeSelectCustom();\n  }\n\n  // press ESC -> close selectCustom\n  if (event.keyCode === 27) {\n    closeSelectCustom();\n  }\n}\n\n// Update selectCustom value when selectNative is changed.\nelSelectNative.addEventListener('change', e => {\n  const value = e.target.value;\n  const elRespectiveCustomOption = elSelectCustomOpts.querySelectorAll(\n    `[data-value=\"${value}\"]`\n  )[0];\n\n  updateCustomSelectChecked(value, elRespectiveCustomOption.textContent);\n});\n\n// Update selectCustom value when an option is clicked or hovered\ncustomOptsList.forEach(function (elOption, index) {\n  elOption.addEventListener('click', e => {\n    const value = e.target.getAttribute('data-value');\n\n    // Sync native select to have the same value\n    elSelectNative.value = value;\n    updateCustomSelectChecked(value, e.target.textContent);\n    closeSelectCustom();\n  });\n\n  elOption.addEventListener('mouseenter', e => {\n    updateCustomSelectHovered(index);\n  });\n\n  // TODO: Toggle these event listeners based on selectCustom visibility\n});\n"],"names":["$717fc6c5b0f6332f$var$elSelectNative","document","getElementsByClassName","$717fc6c5b0f6332f$var$elSelectCustom","$717fc6c5b0f6332f$var$elSelectCustomBox","children","$717fc6c5b0f6332f$var$elSelectCustomOpts","$717fc6c5b0f6332f$var$customOptsList","Array","from","$717fc6c5b0f6332f$var$optionsCount","length","$717fc6c5b0f6332f$var$optionChecked","getAttribute","$717fc6c5b0f6332f$var$optionHoveredIndex","$717fc6c5b0f6332f$var$closeSelectCustom","classList","remove","setAttribute","$717fc6c5b0f6332f$var$updateCustomSelectHovered","removeEventListener","$717fc6c5b0f6332f$var$watchClickOutside","$717fc6c5b0f6332f$var$supportKeyboardNavigation","newIndex","prevOption","option","add","$717fc6c5b0f6332f$var$updateCustomSelectChecked","value","text","prevValue","elPrevOption","querySelector","concat","elOption","textContent","e","contains","event","target","keyCode","preventDefault","addEventListener","findIndex","el","$717fc6c5b0f6332f$var$openSelectCustom","querySelectorAll","forEach","index"],"version":3,"file":"take-order.8bc24095.js.map"}